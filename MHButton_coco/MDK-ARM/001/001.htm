<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [001\001.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image 001\001.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Apr 25 09:04:48 2023
<BR><P>
<H3>Maximum Stack Usage =        688 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
WifiSendTask &rArr; g_showCmdH &rArr; sendcmdH &rArr; send &rArr; send_data_processing &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[2f]">KeyTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">KeyTask</a><BR>
 <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC1_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[30]">DiabcTask</a> from diabctask.o(i.DiabcTask) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[15]">EXTI0_1_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[16]">EXTI2_3_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[17]">EXTI4_15_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[25]">I2C1_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[26]">I2C2_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[2f]">KeyTask</a> from keytask.o(i.KeyTask) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[31]">KeyTimerTask</a> from keytimertask.o(i.KeyTimerTask) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[c]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[32]">NetBridgeModbus</a> from netbridgemodbustask.o(i.NetBridgeModbus) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[f]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[37]">PowerDownDoTask</a> from powerdowndotask.o(i.PowerDownDoTask) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[12]">RTC_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[27]">SPI1_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[28]">SPI2_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[3a]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(i.MX_FREERTOS_Init)
 <LI><a href="#[10]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[2d]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030xc.o(.text)
 <LI><a href="#[21]">TIM14_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[22]">TIM15_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[23]">TIM16_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[24]">TIM17_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[1c]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[1d]">TIM1_CC_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[1e]">TIM3_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[1f]">TIM6_IRQHandler</a> from stm32f0xx_it.o(i.TIM6_IRQHandler) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[20]">TIM7_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[39]">UART_DMAAbortOnError</a> from stm32f0xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f0xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[29]">USART1_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[2a]">USART2_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[2b]">USART3_6_IRQHandler</a> from stm32f0xx_it.o(i.USART3_6_IRQHandler) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[34]">W5500SendTask</a> from w5500sendtask.o(i.W5500SendTask) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[33]">W5500Task</a> from w5500task.o(i.W5500Task) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32f030xc.o(.text) referenced from startup_stm32f030xc.o(RESET)
 <LI><a href="#[36]">WifiSendTask</a> from wifisendtask.o(i.WifiSendTask) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[35]">WifiTask</a> from wifitask.o(i.WifiTask) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[2e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030xc.o(.text)
 <LI><a href="#[3d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[3c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[3c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[7]">eMBFuncReadCoils</a> from mbfunccoils.o(i.eMBFuncReadCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[a]">eMBFuncReadDiscreteInputs</a> from mbfuncdisc.o(i.eMBFuncReadDiscreteInputs) referenced 2 times from mb.o(.data)
 <LI><a href="#[3]">eMBFuncReadHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[2]">eMBFuncReadInputRegister</a> from mbfuncinput.o(i.eMBFuncReadInputRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[6]">eMBFuncReadWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[1]">eMBFuncReportSlaveID</a> from mbfuncother.o(i.eMBFuncReportSlaveID) referenced 2 times from mb.o(.data)
 <LI><a href="#[8]">eMBFuncWriteCoil</a> from mbfunccoils.o(i.eMBFuncWriteCoil) referenced 2 times from mb.o(.data)
 <LI><a href="#[5]">eMBFuncWriteHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[9]">eMBFuncWriteMultipleCoils</a> from mbfunccoils.o(i.eMBFuncWriteMultipleCoils) referenced 2 times from mb.o(.data)
 <LI><a href="#[4]">eMBFuncWriteMultipleHoldingRegister</a> from mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister) referenced 2 times from mb.o(.data)
 <LI><a href="#[38]">eMBPollTask</a> from embpolltask.o(i.eMBPollTask) referenced from coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
 <LI><a href="#[40]">eMBTCPReceive</a> from mbtcp.o(i.eMBTCPReceive) referenced from mb.o(i.eMBTCPInit)
 <LI><a href="#[41]">eMBTCPSend</a> from mbtcp.o(i.eMBTCPSend) referenced from mb.o(i.eMBTCPInit)
 <LI><a href="#[3e]">eMBTCPStart</a> from mbtcp.o(i.eMBTCPStart) referenced from mb.o(i.eMBTCPInit)
 <LI><a href="#[3f]">eMBTCPStop</a> from mbtcp.o(i.eMBTCPStop) referenced from mb.o(i.eMBTCPInit)
 <LI><a href="#[3b]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[2c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[43]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[42]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[44]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[45]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[183]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[184]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[185]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[47]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[186]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[187]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[177]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[178]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[17a]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[188]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetRtcTime
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[189]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_mac
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReportSlaveID
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[105]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_send_CIPSEND_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_analysisUserCmdSub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_monitor_second
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdIP
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmd
</UL>

<P><STRONG><a name="[c9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDoSubxxx
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcmdH
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt_send_Data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_printf
</UL>

<P><STRONG><a name="[5e]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDoSubxxx
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MW8266_strcut_init
</UL>

<P><STRONG><a name="[10e]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDoSubxxx
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerxxxxxxx
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charDoSubxxx
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charIpDoSubxxx
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[18f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[46]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[191]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[192]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[52]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[193]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>ATK_MW8266D_UART_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, atk_mw8266d_uart.o(i.ATK_MW8266D_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ATK_MW8266D_UART_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_6_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>AT_MW8266_strcut_init</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, atk_mw8266d.o(i.AT_MW8266_strcut_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = AT_MW8266_strcut_init &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_restart
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_AT_MW8266_InitSub
</UL>

<P><STRONG><a name="[60]"></a>App_Printf</STRONG> (Thumb, 54 bytes, Stack size 280 bytes, usart.o(i.App_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRtc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_TypeTest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COCO_MX_FREERTOS_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMcuIdForMac
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestClockClear_1000ms
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnTestDoWith
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_monitor
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_getApStaIp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_AT_MW8266_InitSub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDoSubxxx
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerxxxxxxx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_analysisUserCmdSub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clk
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charDoSubxxx
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTask
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Task
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetBridgeModbus
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charIpDoSubxxx
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_monitor_second
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdIP
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dDoWhitOneAtCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MW8266_strcut_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortSendResponse
</UL>

<P><STRONG><a name="[66]"></a>COCO_MX_FREERTOS_Init</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, coco_startostasksub.o(i.COCO_MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = COCO_MX_FREERTOS_Init &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[68]"></a>ClearParameter</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, freertos.o(i.ClearParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ClearParameter &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestClockClear_1000ms
</UL>

<P><STRONG><a name="[30]"></a>DiabcTask</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, diabctask.o(i.DiabcTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DiabcTask &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[b6]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART4_UART_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_DMA_Abort</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>HAL_GPIO_Init</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[6a]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnTestDoWith
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key5Test
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key4Test
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key3Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key2Test
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1Test
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownDoTask
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiabcTask
</UL>

<P><STRONG><a name="[b4]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Read
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Sector
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnTestDoWith
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownDoTask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_Page
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_Enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadSR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadID
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadDeviceID
</UL>

<P><STRONG><a name="[6e]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[167]"></a>HAL_GetUIDw1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetUIDw1))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMcuIdForMac
</UL>

<P><STRONG><a name="[168]"></a>HAL_GetUIDw2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetUIDw2))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMcuIdForMac
</UL>

<P><STRONG><a name="[b7]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[6b]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[6d]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cIsDeviceReady
</UL>

<P><STRONG><a name="[70]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI2cData
</UL>

<P><STRONG><a name="[74]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, stm32f0xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteI2cData
</UL>

<P><STRONG><a name="[6c]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[79]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7b]"></a>HAL_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[8c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[7e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c3]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnTestDoWith
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownDoTask
</UL>

<P><STRONG><a name="[80]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[81]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[82]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[84]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 892 bytes, Stack size 32 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[85]"></a>HAL_SPI_Init</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[87]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[7d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[92]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[8a]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[8e]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, w5500_conf.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, atk_mw8266d_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[95]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 648 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_6_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART4_UART_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_UART_MspInit</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[5c]"></a>HAL_UART_Receive</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATK_MW8266D_UART_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_UART_Transmit</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcmdH
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSendTask
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_printf
</UL>

<P><STRONG><a name="[9b]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>I2cIsDeviceReady</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bl8025.o(i.I2cIsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2cIsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRtc
</UL>

<P><STRONG><a name="[a6]"></a>IINCHIP_READ</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, w5500_conf.o(i.IINCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_IR
</UL>

<P><STRONG><a name="[a9]"></a>IINCHIP_SpiSendData</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w5500_conf.o(i.IINCHIP_SpiSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[aa]"></a>IINCHIP_WRITE</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, w5500_conf.o(i.IINCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IINCHIP_WRITE &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_buf_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSn_IR
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
</UL>

<P><STRONG><a name="[2f]"></a>KeyTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, keytask.o(i.KeyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = KeyTask &rArr;  KeyTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key5Test
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key4Test
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key3Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key2Test
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1Test
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[31]"></a>KeyTimerTask</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, keytimertask.o(i.KeyTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = KeyTimerTask &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[b0]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>MX_GPIO_Init</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>MX_I2C1_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>MX_SPI1_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>MX_SPI2_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>MX_TIM6_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>MX_USART4_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART4_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART4_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>NetBridgeModbus</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, netbridgemodbustask.o(i.NetBridgeModbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = NetBridgeModbus &rArr; g_analysisUserCmdSub &rArr; cmd_wifi &rArr; strDoSubxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_analysisUserCmdSub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[37]"></a>PowerDownDoTask</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, powerdowndotask.o(i.PowerDownDoTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PowerDownDoTask &rArr; PowerDownFrontSaveParameter &rArr; W25Q128_Write &rArr; W25Q128_Write_NoCheck &rArr; W25Q128_Write_Page &rArr; W25Q128_Wait_Busy &rArr; W25Q128_ReadSR &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownFrontSaveParameter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[c1]"></a>PowerDownFrontSaveParameter</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, powerdowndotask.o(i.PowerDownFrontSaveParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PowerDownFrontSaveParameter &rArr; W25Q128_Write &rArr; W25Q128_Write_NoCheck &rArr; W25Q128_Write_Page &rArr; W25Q128_Wait_Busy &rArr; W25Q128_ReadSR &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownDoTask
</UL>

<P><STRONG><a name="[c6]"></a>PowerOnAfterReadParameter</STRONG> (Thumb, 2950 bytes, Stack size 64 bytes, freertos.o(i.PowerOnAfterReadParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PowerOnAfterReadParameter &rArr; W25Q128_TypeTest &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_TypeTest
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Read
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Sector
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[cb]"></a>PowerOnTestDoWith</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, freertos.o(i.PowerOnTestDoWith))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = PowerOnTestDoWith &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[cc]"></a>ReadI2cData</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bl8025.o(i.ReadI2cData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReadI2cData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRtcTime
</UL>

<P><STRONG><a name="[cf]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, w25q64.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Read
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Sector
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_Page
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_Enable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadWriteByte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadSR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadID
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadDeviceID
</UL>

<P><STRONG><a name="[a8]"></a>SPI_SendByte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, w5500_conf.o(i.SPI_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>StartDefaultTask</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = StartDefaultTask &rArr; PowerOnAfterReadParameter &rArr; W25Q128_TypeTest &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ReadRtcWeekChange
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRtc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRtcTime
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COCO_MX_FREERTOS_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMcuIdForMac
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestClockClear_1000ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnTestDoWith
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetRtcTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>TIM6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[da]"></a>TcpServerDoWith</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, tcp_dowithsub.o(i.TcpServerDoWith))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = TcpServerDoWith &rArr; recv &rArr; recv_data_processing &rArr; wiz_read_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSn_IR
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_SR
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_IR
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Task
</UL>

<P><STRONG><a name="[d2]"></a>TestClockClear_1000ms</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, freertos.o(i.TestClockClear_1000ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = TestClockClear_1000ms &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ReadRtcWeekChange
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetRtcTime
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearParameter
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[9f]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a0]"></a>UART_CheckIdleState</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32f0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[9e]"></a>UART_SetConfig</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a1]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32f0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2b]"></a>USART3_6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART3_6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART3_6_IRQHandler &rArr; ATK_MW8266D_UART_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATK_MW8266D_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030xc.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>W25Q128_Erase_Sector</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, w25q64.o(i.W25Q128_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = W25Q128_Erase_Sector &rArr; W25Q128_Wait_Busy &rArr; W25Q128_ReadSR &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_Enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Wait_Busy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
</UL>

<P><STRONG><a name="[c7]"></a>W25Q128_Read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, w25q64.o(i.W25Q128_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = W25Q128_Read &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadWriteByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
</UL>

<P><STRONG><a name="[e8]"></a>W25Q128_ReadDeviceID</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, w25q64.o(i.W25Q128_ReadDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W25Q128_ReadDeviceID &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadWriteByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_TypeTest
</UL>

<P><STRONG><a name="[e9]"></a>W25Q128_ReadID</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w25q64.o(i.W25Q128_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W25Q128_ReadID &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadWriteByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_TypeTest
</UL>

<P><STRONG><a name="[ea]"></a>W25Q128_ReadSR</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, w25q64.o(i.W25Q128_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W25Q128_ReadSR &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadWriteByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Wait_Busy
</UL>

<P><STRONG><a name="[e7]"></a>W25Q128_ReadWriteByte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w25q64.o(i.W25Q128_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadSR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadID
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadDeviceID
</UL>

<P><STRONG><a name="[ca]"></a>W25Q128_TypeTest</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, w25q64.o(i.W25Q128_TypeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = W25Q128_TypeTest &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadID
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadDeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
</UL>

<P><STRONG><a name="[e6]"></a>W25Q128_Wait_Busy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w25q64.o(i.W25Q128_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = W25Q128_Wait_Busy &rArr; W25Q128_ReadSR &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Sector
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_Page
</UL>

<P><STRONG><a name="[c5]"></a>W25Q128_Write</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, w25q64.o(i.W25Q128_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = W25Q128_Write &rArr; W25Q128_Write_NoCheck &rArr; W25Q128_Write_Page &rArr; W25Q128_Wait_Busy &rArr; W25Q128_ReadSR &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Read
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Sector
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownFrontSaveParameter
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
</UL>

<P><STRONG><a name="[e5]"></a>W25Q128_Write_Enable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, w25q64.o(i.W25Q128_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25Q128_Write_Enable &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Sector
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_Page
</UL>

<P><STRONG><a name="[eb]"></a>W25Q128_Write_NoCheck</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, w25q64.o(i.W25Q128_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = W25Q128_Write_NoCheck &rArr; W25Q128_Write_Page &rArr; W25Q128_Wait_Busy &rArr; W25Q128_ReadSR &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write
</UL>

<P><STRONG><a name="[ec]"></a>W25Q128_Write_Page</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, w25q64.o(i.W25Q128_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W25Q128_Write_Page &rArr; W25Q128_Wait_Busy &rArr; W25Q128_ReadSR &rArr; W25Q128_ReadWriteByte &rArr; SPI_FLASH_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_Enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Wait_Busy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write_NoCheck
</UL>

<P><STRONG><a name="[34]"></a>W5500SendTask</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, w5500sendtask.o(i.W5500SendTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = W5500SendTask &rArr; g_showCmdH &rArr; sendcmdH &rArr; send &rArr; send_data_processing &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_showCmdH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[33]"></a>W5500Task</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, w5500task.o(i.W5500Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = W5500Task &rArr; TcpServerDoWith &rArr; recv &rArr; recv_data_processing &rArr; wiz_read_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_buf_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_mac
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[36]"></a>WifiSendTask</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, wifisendtask.o(i.WifiSendTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = WifiSendTask &rArr; g_showCmdH &rArr; sendcmdH &rArr; send &rArr; send_data_processing &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_send_CIPSEND_cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_showCmdH
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[35]"></a>WifiTask</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, wifitask.o(i.WifiTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = WifiTask &rArr; g_atk_AT_MW8266_InitSub &rArr; AT_MW8266_strcut_init &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_monitor
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_getApStaIp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_AT_MW8266_InitSub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[f7]"></a>WriteI2cData</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bl8025.o(i.WriteI2cData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WriteI2cData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRtc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_SetRtcTime
</UL>

<P><STRONG><a name="[f8]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[195]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[64]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
</UL>

<P><STRONG><a name="[196]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[197]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[fa]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[198]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[5f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcmdH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_showCmdH
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clk
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSendTask
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MW8266_strcut_init
</UL>

<P><STRONG><a name="[199]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[19a]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[fb]"></a>__0vsnprintf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19b]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[19c]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[19d]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[62]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>

<P><STRONG><a name="[fc]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19e]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[19f]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1a0]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[10a]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_printf
</UL>

<P><STRONG><a name="[5a]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[83]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[10c]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, netbridgemodbustask.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteRtcWeekChange
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerxxxxxxx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_analysisUserCmdSub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1a1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[101]"></a>atk_mw8266dDoWhitOneAtCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, atk_mw8266d.o(i.atk_mw8266dDoWhitOneAtCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = atk_mw8266dDoWhitOneAtCmd &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_restart
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_AT_MW8266_InitSub
</UL>

<P><STRONG><a name="[102]"></a>atk_mw8266dSendAtCmd</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, atk_mw8266d.o(i.atk_mw8266dSendAtCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atk_mw8266dSendAtCmd &rArr; atk_mw8266d_uart_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_restart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_get_frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_monitor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dDoWhitOneAtCmd
</UL>

<P><STRONG><a name="[106]"></a>atk_mw8266dSendAtCmdIP</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, atk_mw8266d.o(i.atk_mw8266dSendAtCmdIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = atk_mw8266dSendAtCmdIP &rArr; charIpDoSubxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_restart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_get_frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_printf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charIpDoSubxxx
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_getApStaIp
</UL>

<P><STRONG><a name="[108]"></a>atk_mw8266dSendAtCmdStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, atk_mw8266d.o(i.atk_mw8266dSendAtCmdStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atk_mw8266dSendAtCmdStatus &rArr; atk_mw8266d_uart_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_restart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_get_frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_monitor
</UL>

<P><STRONG><a name="[109]"></a>atk_mw8266d_monitor_second</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, atk_mw8266d.o(i.atk_mw8266d_monitor_second))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = atk_mw8266d_monitor_second &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_monitor
</UL>

<P><STRONG><a name="[103]"></a>atk_mw8266d_uart_printf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, atk_mw8266d_uart.o(i.atk_mw8266d_uart_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = atk_mw8266d_uart_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_send_CIPSEND_cmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdIP
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmd
</UL>

<P><STRONG><a name="[104]"></a>atk_mw8266d_uart_rx_get_frame</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, atk_mw8266d_uart.o(i.atk_mw8266d_uart_rx_get_frame))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_monitor
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_send_CIPSEND_cmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdIP
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmd
</UL>

<P><STRONG><a name="[61]"></a>atk_mw8266d_uart_rx_restart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, atk_mw8266d_uart.o(i.atk_mw8266d_uart_rx_restart))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_monitor
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_getApStaIp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_send_CIPSEND_cmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdIP
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dDoWhitOneAtCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MW8266_strcut_init
</UL>

<P><STRONG><a name="[d4]"></a>bsp_GetRtcTime</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bl8025.o(i.bsp_GetRtcTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bsp_GetRtcTime &rArr; ReadI2cData &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadI2cData
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestClockClear_1000ms
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[d1]"></a>bsp_InitRtc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bl8025.o(i.bsp_InitRtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bsp_InitRtc &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteI2cData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cIsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[d5]"></a>bsp_ReadRtcWeekChange</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bl8025.o(i.bsp_ReadRtcWeekChange))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestClockClear_1000ms
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_showCmdH
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clk
</UL>

<P><STRONG><a name="[d3]"></a>bsp_SetRtcTime</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bl8025.o(i.bsp_SetRtcTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bsp_SetRtcTime &rArr; WriteI2cData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteI2cData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[10b]"></a>bsp_WriteRtcWeekChange</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bl8025.o(i.bsp_WriteRtcWeekChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_WriteRtcWeekChange &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerxxxxxxx
</UL>

<P><STRONG><a name="[10d]"></a>charDoSubxxx</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, netbridgemodbustask.o(i.charDoSubxxx))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = charDoSubxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoNum255
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
</UL>

<P><STRONG><a name="[107]"></a>charIpDoSubxxx</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, atk_mw8266d.o(i.charIpDoSubxxx))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = charIpDoSubxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strIptoNum255
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdIP
</UL>

<P><STRONG><a name="[dc]"></a>close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, socket.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = close &rArr; IINCHIP_WRITE &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[111]"></a>cmd_clk</STRONG> (Thumb, 138 bytes, Stack size 144 bytes, netbridgemodbustask.o(i.cmd_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = cmd_clk &rArr; setTimerxxxxxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ReadRtcWeekChange
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerxxxxxxx
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt_send_Data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_analysisUserCmdSub
</UL>

<P><STRONG><a name="[114]"></a>cmd_w5500</STRONG> (Thumb, 514 bytes, Stack size 136 bytes, netbridgemodbustask.o(i.cmd_w5500))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = cmd_w5500 &rArr; charDoSubxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Sector
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt_send_Data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charDoSubxxx
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_analysisUserCmdSub
</UL>

<P><STRONG><a name="[115]"></a>cmd_wdt</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, netbridgemodbustask.o(i.cmd_wdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = cmd_wdt &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_analysisUserCmdSub
</UL>

<P><STRONG><a name="[113]"></a>cmd_wdt_send_Data</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, netbridgemodbustask.o(i.cmd_wdt_send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_wdt_send_Data &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clk
</UL>

<P><STRONG><a name="[116]"></a>cmd_wifi</STRONG> (Thumb, 2102 bytes, Stack size 168 bytes, netbridgemodbustask.o(i.cmd_wifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = cmd_wifi &rArr; strDoSubxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Sector
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strDoSubxxx
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt_send_Data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charDoSubxxx
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_analysisUserCmdSub
</UL>

<P><STRONG><a name="[121]"></a>eMBEnable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mb.o(i.eMBEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPollTask
</UL>

<P><STRONG><a name="[7]"></a>eMBFuncReadCoils</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mbfunccoils.o(i.eMBFuncReadCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBFuncReadCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>eMBFuncReadDiscreteInputs</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mbfuncdisc.o(i.eMBFuncReadDiscreteInputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eMBFuncReadDiscreteInputs &rArr; eMBRegDiscreteCB &rArr; xMBUtilGetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>eMBFuncReadHoldingRegister</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mbfuncholding.o(i.eMBFuncReadHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eMBFuncReadHoldingRegister &rArr; eMBRegHoldingCB &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>eMBFuncReadInputRegister</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mbfuncinput.o(i.eMBFuncReadInputRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBFuncReadInputRegister &rArr; eMBRegInputCB
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegInputCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>eMBFuncReadWriteMultipleHoldingRegister</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mbfuncholding.o(i.eMBFuncReadWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = eMBFuncReadWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>eMBFuncReportSlaveID</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mbfuncother.o(i.eMBFuncReportSlaveID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBFuncReportSlaveID
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>eMBFuncWriteCoil</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mbfunccoils.o(i.eMBFuncWriteCoil))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eMBFuncWriteCoil &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>eMBFuncWriteHoldingRegister</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mbfuncholding.o(i.eMBFuncWriteHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = eMBFuncWriteHoldingRegister &rArr; eMBRegHoldingCB &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>eMBFuncWriteMultipleCoils</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mbfunccoils.o(i.eMBFuncWriteMultipleCoils))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eMBFuncWriteMultipleCoils &rArr; eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>eMBFuncWriteMultipleHoldingRegister</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mbfuncholding.o(i.eMBFuncWriteMultipleHoldingRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eMBFuncWriteMultipleHoldingRegister &rArr; eMBRegHoldingCB &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prveMBError2Exception
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(.data)
</UL>
<P><STRONG><a name="[11e]"></a>eMBPoll</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, mb.o(i.eMBPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventGet
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPollTask
</UL>

<P><STRONG><a name="[38]"></a>eMBPollTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, embpolltask.o(i.eMBPollTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eMBPollTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coco_startostasksub.o(i.COCO_MX_FREERTOS_Init)
</UL>
<P><STRONG><a name="[118]"></a>eMBRegCoilsCB</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, port_fm.o(i.eMBRegCoilsCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eMBRegCoilsCB &rArr; xMBUtilSetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilSetBits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[11a]"></a>eMBRegDiscreteCB</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, port_fm.o(i.eMBRegDiscreteCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBRegDiscreteCB &rArr; xMBUtilGetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
</UL>

<P><STRONG><a name="[11b]"></a>eMBRegHoldingCB</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, port_fm.o(i.eMBRegHoldingCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eMBRegHoldingCB &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
</UL>

<P><STRONG><a name="[11c]"></a>eMBRegInputCB</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, port_fm.o(i.eMBRegInputCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eMBRegInputCB
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
</UL>

<P><STRONG><a name="[124]"></a>eMBTCPDoInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mbtcp.o(i.eMBTCPDoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBTCPDoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPInit
</UL>

<P><STRONG><a name="[120]"></a>eMBTCPInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mb.o(i.eMBTCPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBTCPInit &rArr; eMBTCPDoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPDoInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBPortEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPollTask
</UL>

<P><STRONG><a name="[40]"></a>eMBTCPReceive</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, mbtcp.o(i.eMBTCPReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eMBTCPReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortGetRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBTCPInit)
</UL>
<P><STRONG><a name="[41]"></a>eMBTCPSend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mbtcp.o(i.eMBTCPSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = eMBTCPSend &rArr; xMBTCPPortSendResponse &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortSendResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBTCPInit)
</UL>
<P><STRONG><a name="[3e]"></a>eMBTCPStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mbtcp.o(i.eMBTCPStart))
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBTCPInit)
</UL>
<P><STRONG><a name="[3f]"></a>eMBTCPStop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mbtcp.o(i.eMBTCPStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBTCPStop
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBTCPPortDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb.o(i.eMBTCPInit)
</UL>
<P><STRONG><a name="[3b]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[bf]"></a>g_analysisUserCmdSub</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, netbridgemodbustask.o(i.g_analysisUserCmdSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = g_analysisUserCmdSub &rArr; cmd_wifi &rArr; strDoSubxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clk
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetBridgeModbus
</UL>

<P><STRONG><a name="[f4]"></a>g_atk_AT_MW8266_InitSub</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, atk_mw8266d.o(i.g_atk_AT_MW8266_InitSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = g_atk_AT_MW8266_InitSub &rArr; AT_MW8266_strcut_init &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dDoWhitOneAtCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MW8266_strcut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTask
</UL>

<P><STRONG><a name="[f5]"></a>g_atk_mw8266d_getApStaIp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, atk_mw8266d.o(i.g_atk_mw8266d_getApStaIp))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = g_atk_mw8266d_getApStaIp &rArr; atk_mw8266dSendAtCmdIP &rArr; charIpDoSubxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_restart
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdIP
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTask
</UL>

<P><STRONG><a name="[f6]"></a>g_atk_mw8266d_monitor</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, atk_mw8266d.o(i.g_atk_mw8266d_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = g_atk_mw8266d_monitor &rArr; atk_mw8266d_monitor_second &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_restart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_get_frame
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_monitor_second
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdStatus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTask
</UL>

<P><STRONG><a name="[f3]"></a>g_atk_mw8266d_send_CIPSEND_cmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, atk_mw8266d.o(i.g_atk_mw8266d_send_CIPSEND_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = g_atk_mw8266d_send_CIPSEND_cmd &rArr; atk_mw8266d_uart_printf &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_restart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_rx_get_frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_uart_printf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcmdH
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSendTask
</UL>

<P><STRONG><a name="[ee]"></a>g_showCmdH</STRONG> (Thumb, 776 bytes, Stack size 128 bytes, netbridgemodbustask.o(i.g_showCmdH))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = g_showCmdH &rArr; sendcmdH &rArr; send &rArr; send_data_processing &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ReadRtcWeekChange
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcmdH
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSendTask
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SendTask
</UL>

<P><STRONG><a name="[12b]"></a>getGAR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w5500.o(i.getGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = getGAR &rArr; wiz_read_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[16a]"></a>getIINCHIP_TxMAX</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, w5500.o(i.getIINCHIP_TxMAX))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[12d]"></a>getSIPR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.getSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = getSIPR &rArr; wiz_read_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[12e]"></a>getSUBR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.getSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = getSUBR &rArr; wiz_read_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[df]"></a>getSn_IR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.getSn_IR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getSn_IR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
</UL>

<P><STRONG><a name="[e1]"></a>getSn_RX_RSR</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, w5500.o(i.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = getSn_RX_RSR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
</UL>

<P><STRONG><a name="[db]"></a>getSn_SR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.getSn_SR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = getSn_SR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
</UL>

<P><STRONG><a name="[12f]"></a>getSn_TX_FSR</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, w5500.o(i.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = getSn_TX_FSR &rArr; IINCHIP_READ &rArr; IINCHIP_SpiSendData &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[130]"></a>globalVariable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, globalvariable.o(i.globalVariable))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>listen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, socket.o(i.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = listen &rArr; IINCHIP_WRITE &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
</UL>

<P><STRONG><a name="[2c]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART4_UART_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;globalVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[69]"></a>osDelay</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmsis_os2.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestClockClear_1000ms
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnTestDoWith
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearParameter
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_w5500
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_AT_MW8266_InitSub
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_send_CIPSEND_cmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcmdH
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_showCmdH
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPollTask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTask
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSendTask
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Task
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownDoTask
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetBridgeModbus
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTimerTask
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiabcTask
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_monitor_second
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmdIP
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dSendAtCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266dDoWhitOneAtCmd
</UL>

<P><STRONG><a name="[131]"></a>osKernelInitialize</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>osKernelStart</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>osMessageQueueGet</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMessageQueueGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiSendTask
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SendTask
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetBridgeModbus
</UL>

<P><STRONG><a name="[b2]"></a>osMessageQueueNew</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMessageQueueNew &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[e3]"></a>osMessageQueuePut</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMessageQueuePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt_send_Data
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clk
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_monitor_second
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBTCPPortSendResponse
</UL>

<P><STRONG><a name="[63]"></a>osMutexAcquire</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cmsis_os2.o(i.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearParameter
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownFrontSaveParameter
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key5Test
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key4Test
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key3Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key2Test
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1Test
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTimerTask
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiabcTask
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_monitor_second
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[b1]"></a>osMutexNew</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexNew &rArr; xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[65]"></a>osMutexRelease</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cmsis_os2.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnAfterReadParameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearParameter
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownFrontSaveParameter
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key5Test
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key4Test
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key3Test
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key2Test
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1Test
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTimerTask
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiabcTask
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_mw8266d_monitor_second
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegHoldingCB
</UL>

<P><STRONG><a name="[67]"></a>osThreadNew</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COCO_MX_FREERTOS_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[119]"></a>prveMBError2Exception</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mbutils.o(i.prveMBError2Exception))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleHoldingRegister
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteMultipleCoils
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteHoldingRegister
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncWriteCoil
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadWriteMultipleHoldingRegister
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadInputRegister
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadHoldingRegister
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadDiscreteInputs
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBFuncReadCoils
</UL>

<P><STRONG><a name="[164]"></a>pvPortMalloc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[17e]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[155]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[d0]"></a>readMcuIdForMac</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, freertos.o(i.readMcuIdForMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = readMcuIdForMac &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw2
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[e2]"></a>recv</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, socket.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = recv &rArr; recv_data_processing &rArr; wiz_read_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
</UL>

<P><STRONG><a name="[169]"></a>recv_data_processing</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, w5500.o(i.recv_data_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = recv_data_processing &rArr; wiz_read_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[ef]"></a>reset_w5500</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, w5500_conf.o(i.reset_w5500))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = reset_w5500 &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Task
</UL>

<P><STRONG><a name="[ed]"></a>send</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, socket.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = send &rArr; send_data_processing &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIINCHIP_TxMAX
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendcmdH
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SendTask
</UL>

<P><STRONG><a name="[16b]"></a>send_data_processing</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, w5500.o(i.send_data_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = send_data_processing &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[12a]"></a>sendcmdH</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, netbridgemodbustask.o(i.sendcmdH))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = sendcmdH &rArr; send &rArr; send_data_processing &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_atk_mw8266d_send_CIPSEND_cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_showCmdH
</UL>

<P><STRONG><a name="[16d]"></a>setGAR</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w5500.o(i.setGAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = setGAR &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[16e]"></a>setSHAR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.setSHAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = setSHAR &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_mac
</UL>

<P><STRONG><a name="[16f]"></a>setSIPR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.setSIPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = setSIPR &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[170]"></a>setSUBR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.setSUBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = setSUBR &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_w5500_ip
</UL>

<P><STRONG><a name="[e0]"></a>setSn_IR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, w5500.o(i.setSn_IR))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = setSn_IR &rArr; IINCHIP_WRITE &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
</UL>

<P><STRONG><a name="[112]"></a>setTimerxxxxxxx</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, netbridgemodbustask.o(i.setTimerxxxxxxx))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = setTimerxxxxxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_WriteRtcWeekChange
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoNum255
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_clk
</UL>

<P><STRONG><a name="[f1]"></a>set_w5500_ip</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, w5500_conf.o(i.set_w5500_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = set_w5500_ip &rArr; setSUBR &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Task
</UL>

<P><STRONG><a name="[f0]"></a>set_w5500_mac</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w5500_conf.o(i.set_w5500_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = set_w5500_mac &rArr; setSHAR &rArr; wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Task
</UL>

<P><STRONG><a name="[dd]"></a>socket</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, socket.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = socket &rArr; close &rArr; IINCHIP_WRITE &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerDoWith
</UL>

<P><STRONG><a name="[f2]"></a>socket_buf_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, w5500.o(i.socket_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = socket_buf_init &rArr; IINCHIP_WRITE &rArr; SPI_SendByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Task
</UL>

<P><STRONG><a name="[117]"></a>strDoSubxxx</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, netbridgemodbustask.o(i.strDoSubxxx))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = strDoSubxxx &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
</UL>

<P><STRONG><a name="[110]"></a>strIptoNum255</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, atk_mw8266d.o(i.strIptoNum255))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strIptoNum255
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charIpDoSubxxx
</UL>

<P><STRONG><a name="[10f]"></a>strtoNum255</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, netbridgemodbustask.o(i.strtoNum255))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strtoNum255
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimerxxxxxxx
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;charDoSubxxx
</UL>

<P><STRONG><a name="[144]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[174]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[181]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[148]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[154]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[146]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[145]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[129]"></a>vMBTCPPortDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, porttcp.o(i.vMBTCPPortDisable))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPStop
</UL>

<P><STRONG><a name="[c2]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnTestDoWith
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownDoTask
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[c4]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnTestDoWith
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wifi
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_wdt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_w5500
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDownDoTask
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[14f]"></a>vPortFree</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[149]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[139]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[15e]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[133]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[17b]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[163]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[172]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[171]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[173]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[134]"></a>vTaskStartScheduler</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[15c]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[49]"></a>vTaskSwitchContext</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[a7]"></a>wiz_cs</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, w5500_conf.o(i.wiz_cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wiz_cs
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_write_buf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_read_buf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_WRITE
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_READ
</UL>

<P><STRONG><a name="[12c]"></a>wiz_read_buf</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, w5500_conf.o(i.wiz_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = wiz_read_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IINCHIP_SpiSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_data_processing
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSUBR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSIPR
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGAR
</UL>

<P><STRONG><a name="[16c]"></a>wiz_write_buf</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, w5500_conf.o(i.wiz_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = wiz_write_buf &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_cs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_processing
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSUBR
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSIPR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSHAR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGAR
</UL>

<P><STRONG><a name="[11f]"></a>xMBPortEventGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[126]"></a>xMBPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPInit
</UL>

<P><STRONG><a name="[c0]"></a>xMBPortEventPost</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, portevent.o(i.xMBPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetBridgeModbus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBPoll
</UL>

<P><STRONG><a name="[127]"></a>xMBTCPPortGetRequest</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, porttcp.o(i.xMBTCPPortGetRequest))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPReceive
</UL>

<P><STRONG><a name="[125]"></a>xMBTCPPortInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, porttcp.o(i.xMBTCPPortInit))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPDoInit
</UL>

<P><STRONG><a name="[128]"></a>xMBTCPPortSendResponse</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, porttcp.o(i.xMBTCPPortSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = xMBTCPPortSendResponse &rArr; App_Printf &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Printf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBTCPSend
</UL>

<P><STRONG><a name="[122]"></a>xMBUtilGetBits</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mbutils.o(i.xMBUtilGetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBUtilGetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegDiscreteCB
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[123]"></a>xMBUtilSetBits</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mbutils.o(i.xMBUtilSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xMBUtilSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBRegCoilsCB
</UL>

<P><STRONG><a name="[176]"></a>xPortStartScheduler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xPortStartScheduler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[d8]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13f]"></a>xQueueCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[13e]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutexStatic &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[138]"></a>xQueueGenericCreate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[137]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[152]"></a>xQueueGenericReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[13a]"></a>xQueueGenericSend</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[13b]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[140]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[135]"></a>xQueueReceive</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[136]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[13d]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[13c]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[17c]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[142]"></a>xTaskCreate</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[141]"></a>xTaskCreateStatic</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[17d]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[d7]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[15f]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[179]"></a>xTaskIncrementTick</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[14d]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[17f]"></a>xTaskPriorityInherit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[162]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[15d]"></a>xTaskResumeAll</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[175]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTimerCreateTimerTask &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[15a]"></a>xTimerGenericCommand</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ab]"></a>Key1Test</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, keytask.o(i.Key1Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Key1Test &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
</UL>

<P><STRONG><a name="[ac]"></a>Key2Test</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, keytask.o(i.Key2Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Key2Test &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
</UL>

<P><STRONG><a name="[ad]"></a>Key3Test</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, keytask.o(i.Key3Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Key3Test &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
</UL>

<P><STRONG><a name="[ae]"></a>Key4Test</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, keytask.o(i.Key4Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Key4Test &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
</UL>

<P><STRONG><a name="[af]"></a>Key5Test</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, keytask.o(i.Key5Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Key5Test &rArr; osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTask
</UL>

<P><STRONG><a name="[14b]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[14c]"></a>prvCopyDataToQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[150]"></a>prvInitialiseMutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[151]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[157]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[161]"></a>prvUnlockQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[143]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[147]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[14e]"></a>prvDeleteTCB</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[43]"></a>prvIdleTask</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[153]"></a>prvInitialiseNewTask</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[180]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[14a]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[156]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[158]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[15b]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[159]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[160]"></a>prvSwitchTimerLists</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[44]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[165]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[166]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[42]"></a>prvTaskExitError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[a4]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[a3]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, stm32f0xx_hal_i2c.o(i.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[71]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f0xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[75]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f0xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[72]"></a>I2C_TransferConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[6f]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[73]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[76]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f0xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[7f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[88]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[cd]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, stm32f0xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[ce]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, stm32f0xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[39]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f0xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[96]"></a>UART_EndRxTransfer</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[fd]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f9]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[100]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ff]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[3c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
